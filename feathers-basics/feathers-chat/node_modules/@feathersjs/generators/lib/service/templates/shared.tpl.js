"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
const pinion_1 = require("@feathershq/pinion");
const commons_1 = require("../../commons");
const sharedTemplate = ({ camelName, upperName, className, fileName, relative, path }) => /* ts */ `// For more information about this file see https://dove.feathersjs.com/guides/cli/service.shared.html
import type { Params } from '@feathersjs/feathers'
import type { ClientApplication } from '${relative}/client'
import type {
  ${upperName},
  ${upperName}Data,
  ${upperName}Patch,
  ${upperName}Query,
  ${className}
} from './${fileName}.class'

export type { ${upperName}, ${upperName}Data, ${upperName}Patch, ${upperName}Query }

export type ${upperName}ClientService = Pick<
  ${className}<Params<${upperName}Query>>,
  typeof ${camelName}Methods[number]
>

export const ${camelName}Path = '${path}'

export const ${camelName}Methods = ['find', 'get', 'create', 'patch', 'remove'] as const

export const ${camelName}Client = (client: ClientApplication) => {
  const connection = client.get('connection')

  client.use(${camelName}Path, connection.service(${camelName}Path), {
    methods: ${camelName}Methods
  })
}

// Add this service to the client service type index
declare module '${relative}/client' {
  interface ServiceTypes {
    [${camelName}Path]: ${upperName}ClientService
  }
}
`;
const generate = async (ctx) => (0, pinion_1.generator)(ctx).then((0, pinion_1.when)(({ lib, language }) => (0, commons_1.fileExists)(lib, `client.${language}`), (0, commons_1.renderSource)(sharedTemplate, (0, pinion_1.toFile)(({ lib, folder, fileName }) => [
    lib,
    'services',
    ...folder,
    `${fileName}.shared`
]))));
exports.generate = generate;
//# sourceMappingURL=shared.tpl.js.map