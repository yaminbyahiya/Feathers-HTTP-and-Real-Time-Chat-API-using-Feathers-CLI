/// <reference types="node" />
import { SpawnOptions } from 'child_process';
import { PromptModule } from 'inquirer';
import yargs, { Argv } from 'yargs';
export { Argv, yargs };
export interface Logger {
    warn: (msg: string) => void;
    error: (msg: string) => void;
    log: (msg: string) => void;
    notice: (msg: string) => void;
}
export declare class BasicLogger implements Logger {
    logger: typeof console;
    previousNotice: string;
    warn(msg: string): void;
    error(msg: string): void;
    log(msg: string): void;
    notice(msg: string): void;
}
export declare type PinionTrace = {
    name: string;
    timestamp: number;
    info: unknown;
};
export declare type Configuration = {
    cwd: string;
    logger: Logger;
    force: boolean;
    prompt: PromptModule;
    trace: PinionTrace[];
    exec: (command: string, args: string[], options?: SpawnOptions) => Promise<number>;
};
export declare type PinionContext = {
    cwd: string;
    _?: (number | string)[];
    pinion: Configuration;
};
export declare type ContextCallable<T, C extends PinionContext> = (ctx: C) => T | Promise<T>;
export declare type Callable<T, C extends PinionContext> = T | ContextCallable<T, C>;
export declare type Promisable<T> = T | Promise<T>;
export declare const getCallable: <T, C extends PinionContext>(callable: Callable<T, C>, context: C) => Promise<T>;
export declare const mapCallables: <X, C extends PinionContext>(callables: Callable<X, C>[], context: C) => Promise<Awaited<X>[]>;
export declare const getConfig: (initialConfig?: Partial<Configuration>) => Configuration;
export declare const getContext: <T extends PinionContext>(initialCtx: Partial<T>, initialConfig?: Partial<Configuration>) => T;
export declare const generator: <T extends PinionContext>(initialContext: T) => Promise<T>;
export declare const runModule: (file: string, ctx: PinionContext) => Promise<any>;
