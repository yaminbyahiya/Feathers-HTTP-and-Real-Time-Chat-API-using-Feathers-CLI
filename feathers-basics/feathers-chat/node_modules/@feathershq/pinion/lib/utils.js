"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.merge = exports.listAllFiles = exports.listFiles = exports.loadModule = void 0;
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const path_1 = __importDefault(require("path"));
let tsNode;
const tsNodeRegister = async (mod = 'ts-node/register') => (tsNode = tsNode || Promise.resolve().then(() => __importStar(require(mod))));
const extensionCheck = /(\.ts|\.js)$/;
const getFileName = (file) => {
    if (extensionCheck.test(file)) {
        return file;
    }
    if ((0, fs_1.existsSync)(`${file}.js`)) {
        return `${file}.js`;
    }
    if ((0, fs_1.existsSync)(`${file}.ts`)) {
        return `${file}.ts`;
    }
    return file;
};
const loadModule = async (file) => {
    const fileName = getFileName(file);
    if (fileName.endsWith('.ts')) {
        await tsNodeRegister();
    }
    return Promise.resolve().then(() => __importStar(require(file)));
};
exports.loadModule = loadModule;
const listFiles = async (folder, extension) => {
    const list = await (0, promises_1.readdir)(folder, { withFileTypes: true });
    const fileNames = list.filter((file) => file.isFile()).map(({ name }) => path_1.default.resolve(folder, name));
    return extension ? fileNames.filter((name) => name.endsWith(extension)) : fileNames;
};
exports.listFiles = listFiles;
const listAllFiles = async (folder) => {
    const list = await (0, promises_1.readdir)(folder, { withFileTypes: true });
    const nameList = await Promise.all(list.map((file) => {
        const fullName = path_1.default.resolve(folder, file.name);
        return file.isDirectory() ? (0, exports.listAllFiles)(fullName) : fullName;
    }));
    return nameList.flat().sort();
};
exports.listAllFiles = listAllFiles;
const merge = (target, source) => {
    for (const key of Object.keys(source)) {
        const value = source[key];
        if (value && typeof value === 'object' && !Array.isArray(value)) {
            target[key] = (0, exports.merge)(target[key] || {}, value);
        }
        else {
            target[key] = value;
        }
    }
    return target;
};
exports.merge = merge;
