"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
const pinion_1 = require("@feathershq/pinion");
const commons_1 = require("../../commons");
const defaultConfig = ({}) => ({
    host: 'localhost',
    port: 3030,
    public: './public/',
    origins: ['http://localhost:3030'],
    paginate: {
        default: 10,
        max: 50
    }
});
const customEnvironment = {
    port: {
        __name: 'PORT',
        __format: 'number'
    },
    host: 'HOSTNAME',
    authentication: {
        secret: 'FEATHERS_SECRET'
    }
};
const testConfig = {
    port: 8998
};
const configurationJsonTemplate = ({}) => `import { defaultAppSettings, getValidator } from '@feathersjs/schema'
import type { FromSchema } from '@feathersjs/schema'

import { dataValidator } from './validators'

export const configurationSchema = {
  $id: 'configuration',
  type: 'object',
  additionalProperties: false,
  required: [ 'host', 'port', 'public' ],
  properties: {
    ...defaultAppSettings,
    host: { type: 'string' },
    port: { type: 'number' },
    public: { type: 'string' }
  }
} as const

export const configurationValidator = getValidator(configurationSchema, dataValidator)

export type ApplicationConfiguration = FromSchema<typeof configurationSchema>
`;
const configurationTypeboxTemplate = ({}) => `import { Type, getValidator, defaultAppConfiguration } from '@feathersjs/typebox'
import type { Static } from '@feathersjs/typebox'

import { dataValidator } from './validators'

export const configurationSchema = Type.Intersect([
  defaultAppConfiguration,
  Type.Object({
    host: Type.String(),
    port: Type.Number(),
    public: Type.String()
  })
])

export type ApplicationConfiguration = Static<typeof configurationSchema>

export const configurationValidator = getValidator(configurationSchema, dataValidator)
`;
const generate = (ctx) => (0, pinion_1.generator)(ctx)
    .then((0, pinion_1.writeJSON)(defaultConfig, (0, pinion_1.toFile)('config', 'default.json')))
    .then((0, pinion_1.writeJSON)(testConfig, (0, pinion_1.toFile)('config', 'test.json')))
    .then((0, pinion_1.writeJSON)(customEnvironment, (0, pinion_1.toFile)('config', 'custom-environment-variables.json')))
    .then((0, pinion_1.when)((ctx) => ctx.schema !== false, (0, commons_1.renderSource)(async (ctx) => ctx.schema === 'typebox' ? configurationTypeboxTemplate(ctx) : configurationJsonTemplate(ctx), (0, pinion_1.toFile)(({ lib }) => lib, 'configuration'))));
exports.generate = generate;
//# sourceMappingURL=configuration.tpl.js.map