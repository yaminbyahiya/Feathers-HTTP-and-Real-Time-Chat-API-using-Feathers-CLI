"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runModule = exports.generator = exports.getContext = exports.getConfig = exports.mapCallables = exports.getCallable = exports.BasicLogger = exports.yargs = void 0;
const child_process_1 = require("child_process");
const inquirer_1 = require("inquirer");
const yargs_1 = __importDefault(require("yargs"));
exports.yargs = yargs_1.default;
const chalk_1 = __importDefault(require("chalk"));
const utils_1 = require("./utils");
const { yellow, red, blue } = chalk_1.default;
class BasicLogger {
    constructor() {
        this.logger = console;
        this.previousNotice = '';
    }
    warn(msg) {
        this.logger.log(yellow(`    ${msg}`));
    }
    error(msg) {
        this.logger.log(red(msg));
    }
    log(msg) {
        this.logger.log(msg);
    }
    notice(msg) {
        if (this.previousNotice !== msg) {
            this.logger.log(blue(`    ${msg}`));
            this.previousNotice = msg;
        }
    }
}
exports.BasicLogger = BasicLogger;
const getCallable = async (callable, context) => typeof callable === 'function' ? callable(context) : callable;
exports.getCallable = getCallable;
const mapCallables = (callables, context) => Promise.all(callables.map((callable) => (0, exports.getCallable)(callable, context)));
exports.mapCallables = mapCallables;
const getConfig = (initialConfig) => ({
    prompt: inquirer_1.prompt,
    logger: new BasicLogger(),
    cwd: process.cwd(),
    force: false,
    trace: [],
    exec: (command, args, options) => {
        const child = (0, child_process_1.spawn)(command, args, {
            stdio: 'inherit',
            shell: true,
            ...options
        });
        return new Promise((resolve, reject) => {
            child.once('exit', (code) => (code === 0 ? resolve(code) : reject(code)));
        });
    },
    ...initialConfig
});
exports.getConfig = getConfig;
const getContext = (initialCtx, initialConfig = {}) => {
    const pinion = (0, exports.getConfig)(initialConfig);
    return {
        cwd: pinion.cwd,
        ...initialCtx,
        pinion
    };
};
exports.getContext = getContext;
const generator = async (initialContext) => initialContext;
exports.generator = generator;
const runModule = async (file, ctx) => {
    const { generate } = await (0, utils_1.loadModule)(file);
    return generate(ctx);
};
exports.runModule = runModule;
