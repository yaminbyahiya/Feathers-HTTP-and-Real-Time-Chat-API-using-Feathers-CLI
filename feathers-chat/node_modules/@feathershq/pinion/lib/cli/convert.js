"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convert = void 0;
const path_1 = require("path");
const promises_1 = require("fs/promises");
const utils_1 = require("../utils");
const conversionRegex = /(`|\$\{)/g;
const convertContent = (content) => content.replace(conversionRegex, '\\$1');
const template = (content, fileName) => `import { PinionContext, generator, renderTemplate, to } from '@feathershq/pinion'

export interface Context extends PinionContext {
  // Put additional context variables here
} 

const template = (ctx: Context) =>
\`${convertContent(content)}\`

export const generate = (ctx: Context) => generator(ctx)
  .then(renderTemplate(template, to('${fileName}')))
`;
const convert = async (ctx) => {
    const { file, to, cwd, pinion } = ctx;
    const convertFile = async (current) => {
        const relativeName = (0, path_1.relative)(cwd, current);
        const target = (0, path_1.join)(cwd, to, `${relativeName}.tpl.ts`);
        const content = (await (0, promises_1.readFile)(current)).toString();
        await (0, promises_1.mkdir)((0, path_1.dirname)(target), {
            recursive: true
        });
        await (0, promises_1.writeFile)(target, template(content, relativeName));
        pinion.logger.log(`Converted file ${relativeName}`);
    };
    const convertDirectory = async (directory) => {
        const files = await (0, utils_1.listAllFiles)(directory);
        await Promise.all(files.map(async (file) => (await (0, promises_1.stat)(file)).isDirectory() ? convertDirectory(file) : convertFile(file)));
    };
    const fileName = (0, path_1.join)(cwd, file);
    const handle = await (0, promises_1.stat)(fileName);
    if (handle.isDirectory()) {
        return convertDirectory(fileName);
    }
    if (handle.isFile()) {
        return convertFile(fileName);
    }
    throw new Error(`${file} is not a valid file`);
};
exports.convert = convert;
