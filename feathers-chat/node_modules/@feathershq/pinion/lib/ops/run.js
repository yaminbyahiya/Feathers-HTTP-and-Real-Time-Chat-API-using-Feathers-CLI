"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runGenerator = exports.runGenerators = void 0;
const path_1 = require("path");
const promises_1 = require("fs/promises");
const core_1 = require("../core");
const utils_1 = require("../utils");
const helpers_1 = require("./helpers");
const getFileName = async (ctx, pathParts) => {
    const segments = (await (0, core_1.mapCallables)(pathParts, ctx)).flat();
    return (0, path_1.join)(...segments);
};
/**
 * Run all Pinion generators within a folder in sequence, ordered by name
 *
 * @param pathParts The parts of the folder to run. Can be assembled dynamically based on context.
 * @returns The context returned by all generators merged together
 */
const runGenerators = (...pathParts) => async (ctx) => {
    const name = await getFileName(ctx, pathParts);
    const handle = await (0, promises_1.stat)(name);
    if (!handle.isDirectory()) {
        throw new Error(`${name} must be a directory (runGenerators)`);
    }
    const [compiledFiles, tsFiles] = await Promise.all([
        (0, utils_1.listFiles)(name, '.tpl.js'),
        (0, utils_1.listFiles)(name, '.tpl.ts')
    ]);
    const files = compiledFiles.length ? compiledFiles : tsFiles;
    for (const file of files.sort()) {
        await (0, core_1.runModule)(file, ctx);
    }
    return (0, helpers_1.addTrace)(ctx, 'runGenerators', { files });
};
exports.runGenerators = runGenerators;
/**
 * Run a single generator file
 *
 * @param pathParts The parts of the folder to run. Can be assembled dynamically based on context.
 * @returns The current and generator context merged together
 */
const runGenerator = (...pathParts) => async (ctx) => {
    const name = await getFileName(ctx, pathParts);
    await (0, core_1.runModule)(name, ctx);
    return ctx;
};
exports.runGenerator = runGenerator;
