import { PinionContext, Callable } from '../core';
export declare type Location<C extends PinionContext> = (lines: string[], ctx: C, fileName: string) => Promise<{
    index: number;
    pattern?: string | RegExp | undefined;
}>;
export declare const inject: <C extends PinionContext>(template: Callable<string, C>, location: Location<C>, target: Callable<string, C>) => <T extends C>(ctx: T) => Promise<T>;
export declare const before: <C extends PinionContext>(pattern: Callable<string | RegExp, C>) => (lines: string[], ctx: any, fileName: string) => Promise<{
    index: number;
    pattern: string | RegExp;
}>;
export declare const after: <C extends PinionContext>(pattern: Callable<string | RegExp, C>) => (lines: string[], ctx: any, fileName: string) => Promise<{
    index: number;
    pattern: string | RegExp;
}>;
export declare const prepend: () => () => Promise<{
    index: number;
}>;
export declare const append: () => (lines: string[]) => Promise<{
    index: number;
}>;
