"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptWriteFile = exports.overwrite = exports.addTrace = void 0;
const path_1 = require("path");
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
/**
 * Add tracing information on what happened to the Pinion context
 *
 * @param ctx The current context
 * @param name The name of the operation
 * @param data The data to log
 * @returns The current context
 */
const addTrace = (ctx, name, info) => {
    ctx.pinion.trace = [...ctx.pinion.trace, { name, info, timestamp: Date.now() }];
    return ctx;
};
exports.addTrace = addTrace;
const overwrite = async (ctx, fileName, options = {}) => {
    const { prompt, logger } = ctx.pinion;
    const force = options.force !== undefined ? options.force : ctx.pinion.force;
    const relativeName = (0, path_1.relative)(ctx.cwd, fileName);
    if ((0, fs_1.existsSync)(fileName) && !force) {
        const { overwrite } = await prompt([
            {
                type: 'confirm',
                name: 'overwrite',
                message: `File ${relativeName} already exists. Overwrite?`
            }
        ]);
        if (!overwrite) {
            logger.warn(`Skipped file ${relativeName}`);
            return false;
        }
    }
    return true;
};
exports.overwrite = overwrite;
const promptWriteFile = async (fileName, content, ctx, options = {}) => {
    const { logger } = ctx.pinion;
    const relativeName = (0, path_1.relative)(ctx.cwd, fileName);
    if (await (0, exports.overwrite)(ctx, fileName, options)) {
        await (0, promises_1.writeFile)(fileName, content);
        logger.notice(`Wrote file ${relativeName}`);
    }
    return ctx;
};
exports.promptWriteFile = promptWriteFile;
