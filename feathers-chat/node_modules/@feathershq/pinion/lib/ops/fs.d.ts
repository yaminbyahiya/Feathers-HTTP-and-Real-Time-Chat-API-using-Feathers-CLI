import { PinionContext, Callable } from '../core';
import { WriteFileOptions } from './helpers';
export declare const toFile: <C extends PinionContext>(...targets: Callable<string | string[], C>[]) => <T extends C>(ctx: T) => Promise<string>;
export declare const fromFile: <C extends PinionContext>(...targets: Callable<string | string[], C>[]) => <T extends C>(ctx: T) => Promise<string>;
export declare type JSONData = {
    [key: string]: any;
};
/**
 * Recursively copy all files from a folder to a destination.
 * Will prompt if the to file already exists.
 *
 * @param from The (local) folder to copy files from
 * @param to The destination to copy the files to
 * @param options File copy options (e.g. `{ force: true }`)
 * @returns The current context
 */
export declare const copyFiles: <C extends PinionContext>(from: Callable<string, C>, to: Callable<string, C>, options?: Partial<WriteFileOptions>) => <T extends C>(ctx: T) => Promise<T>;
/**
 * Load a JSON file and merge the data into the context
 *
 * @param file The name of the JSON file
 * @param converter A converter that returns the data that will be merged into the context
 * @returns The current context
 */
export declare const loadJSON: <C extends PinionContext>(file: Callable<string, C>, converter?: (data: JSONData, ctx: C) => JSONData, fallback?: Callable<JSONData, C> | undefined) => <T extends C>(ctx: T) => Promise<T>;
/**
 * Write formatted JSON to a file
 *
 * @param json The JSON data to write
 * @param file The filename to write to
 * @returns The current context
 */
export declare const writeJSON: <C extends PinionContext>(json: Callable<JSONData, C>, file: Callable<string, C>, options?: Partial<WriteFileOptions>) => <T extends C>(ctx: T) => Promise<T>;
/**
 * Merge an existing JSON file with new data
 *
 * @param json The JSON data to add to the file
 * @param file The filename to write to
 * @returns The current context
 */
export declare const mergeJSON: <C extends PinionContext>(json: Callable<JSONData, C>, file: Callable<string, C>) => <T extends C>(ctx: T) => Promise<T>;
